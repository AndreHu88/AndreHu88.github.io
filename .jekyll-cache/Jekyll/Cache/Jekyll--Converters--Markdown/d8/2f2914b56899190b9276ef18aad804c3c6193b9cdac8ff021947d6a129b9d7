I"a<h3 id="记录学习springboot的过程">记录学习SpringBoot的过程</h3>

<p>Spring Boot是一个基于Java的开源框架，用于创建微服务</p>

<p>SpringBoot的好处</p>
<ol>
  <li>避免在Spring中进行复杂的XML配置</li>
  <li>以更简单的方式开发生产就绪的Spring应用程序</li>
  <li>减少开发时间并独立运行应用程序</li>
  <li>提供一种更简单的应用程序入门方式</li>
</ol>

<h4 id="正式开始springboot">正式开始SpringBoot</h4>

<h5 id="1依赖springboot">1.依赖SpringBoot</h5>

<p>所有Spring Boot启动程序都遵循相同的命名模式<code class="language-plaintext highlighter-rouge">spring-boot-starter-*</code></p>

<p>Spring Boot Starter Actuator依赖关系用于监视和管理应用程序。 其代码如下所示</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>Spring Boot Starter Security依赖项用于Spring Security。 其代码如下所示</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>
<p>Spring Boot Starter Web依赖项用于编写Rest端点。 其代码如下所示</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>Spring Boot Starter Thyme Leaf依赖项用于创建Web应用程序。 其代码如下所示</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>
<p>Spring Boot Starter Test依赖项用于编写测试用例。 其代码如下所示</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-test&lt;artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h5 id="2-代码结构">2. 代码结构</h5>

<p>Java推荐的包声明命名约定是反向域名。 例如 - com.jack.projectName</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com
    +- jack
        +- projectName
            +- Application.java
            |
            +- Model / Bean
            |    +- Model.java
            +- Dao
            |    +- Mapper.java
            +- Controller
            |    +- Controller.java
            +- Service
            |    +- Service.java
</code></pre></div></div>

<h5 id="3-构建restful项目">3. 构建Restful项目</h5>

<p>@RestController注释用于定义RESTful Web服务。它提供JSON，XML和自定义响应。其语法如下所</p>

<p>封装一个公共的返回对象，方便返回</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
public class CommonResult&lt;T&gt; {
    private long code;
    private String message;
    private T data;
    
    // 对接口的返回常用的类型做封装
    public static &lt;T&gt; CommonResult&lt;T&gt; success(T data) {
        return new CommonResult&lt;T&gt;(ResultCode.SUCCESS.getCode(), ResultCode.SUCCESS.getMessage(), data);
    }

    public static &lt;T&gt; CommonResult&lt;T&gt; success(T data, String message) {
        return new CommonResult&lt;T&gt;(ResultCode.SUCCESS.getCode(), message, data);
    }
}
</code></pre></div></div>

<p>SpringBoot的注解整理</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 读取环境或应用程序属性值
@Value("${property_key_name}")

// 定义RESTful Web服务。它提供JSON，XML和自定义响应
@RestController

// 注释用于定义访问REST端点的Request URI
@RequestMapping(value = "/apiName")

// 注释用于定义请求正文内容类型
 public RequestResult userRegister(@RequestBody User user) {
    return RequestResult.success("注册成功");
    }
    
// 批注用于定义自定义或动态请求URI
@PathVariable
public ResponseEntity&lt;Object&gt; updateProduct(@PathVariable("id") String id) {

}

// 注释用于从请求URL读取请求参数
@RequestParam


</code></pre></div></div>

<p>开始编写接口</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RestController
public class UserController {


    @RequestMapping(value = "/login", method = RequestMethod.POST)
    @ResponseBody
    public CommonResult login(@RequestBody UmsAdminLoginParam umsAdminLoginParam, BindingResult result) {
        String token = adminService.login(umsAdminLoginParam.getUsername(), umsAdminLoginParam.getPassword());
        if (token == null) {
            return CommonResult.validateFailed("用户名或密码错误");
        }
        Map&lt;String, String&gt; tokenMap = new HashMap&lt;&gt;();
        tokenMap.put("token", token);
        tokenMap.put("tokenHead", tokenHead);
        return CommonResult.success(tokenMap);
    }
}
</code></pre></div></div>

:ET