<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-24T19:07:20+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">风车大战骑士</title><subtitle>生活不止眼前的苟且，还有诗和远方</subtitle><entry><title type="html">曾国藩传读书笔记</title><link href="http://localhost:4000/%E6%9B%BE%E5%9B%BD%E8%97%A9%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="曾国藩传读书笔记" /><published>2019-08-24T00:00:00+08:00</published><updated>2019-08-24T00:00:00+08:00</updated><id>http://localhost:4000/%E6%9B%BE%E5%9B%BD%E8%97%A9%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/%E6%9B%BE%E5%9B%BD%E8%97%A9%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">&lt;h3 id=&quot;最近在看曾国藩深有感触记录下读书笔记&quot;&gt;最近在看《曾国藩》深有感触，记录下读书笔记&lt;/h3&gt;

&lt;p&gt;曾国藩， 从湖南湘乡荷叶塘的一个农家子弟完全靠自己的能力与见识拜相封侯，晚晴第一重臣。学习曾国藩的为人处世的方式将使我一生受益无穷&lt;/p&gt;

&lt;h5 id=&quot;1-肯下苦工&quot;&gt;1. 肯下苦工&lt;/h5&gt;

&lt;p&gt;屋内背书5遍依然不会，而梁上君子已经可以背诵,年少的曾国藩并不太出众，但愿意下苦工来学习，正是这样的好习惯使得曾国藩一生受益，影响其做人，做官，带兵&lt;/p&gt;

&lt;h5 id=&quot;2曾国藩心细的表现&quot;&gt;2.曾国藩心细的表现&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;曾国藩来到养性殿。养性殿是皇宫收藏前代名人字画的宫殿，皇帝接见臣下，一般不在这里。守殿的大太监名叫过业大，人称大公公。国藩与大公公打声招呼后，便端坐在养性殿候驾。一坐整整两个时辰，时至正午，尚不见召，国藩心中犯疑，请大公公打听。一会儿，大公公告诉他：皇上今天不来了，明天在养心殿召见。 曾国藩是个心细的人，他回到家里，越想此事越蹊跷。在翰林院当差七年了，受皇上召见也有好几次，从来没有遇过这样的情况，也没有听说过有这样的事。他赶紧套上马车，去见恩师穆彰阿，请教此中原委。穆彰阿也觉得奇怪，详细询问事情的前前后后，和阗玉球在手中滚过百把圈后，他明白了。穆彰阿立即叫仆人带上三百两银子去找大公公，要大公公将养性殿内的陈设，尤其是四壁悬挂的字画，一幅不漏、一字不漏地抄出。夜间，大公公送来抄单。穆彰阿要曾国藩读熟记住&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3郭嵩焘对曾传授为人做官的方法&quot;&gt;3.郭嵩焘对曾传授为人做官的方法&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;“你若像我这样，不在地方办事，又不带勇剿贼则罢，倘若指望办成大事，剿灭逆贼，你有些做法要改。” “旁观者清。我哪些地方做得不对，你就直言不讳吧！”曾国藩已感受到郭嵩焘的一片真心。 “第一，要联络好地方文武，不要总是站在与他们为敌的地位，当妥协处则妥协。常言说得好，强龙不压地头蛇。第二，越俎代庖之事不能再做，费力不讨好，反招怨敌。第三，要利用绿营的力量，不要再单枪匹马地干。若做到这三点，许多事情会办得好些。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;4兵败后被高人指点-从以前的柔刚-开始-柔&quot;&gt;4.兵败后被高人指点, 从以前的“柔刚“ 开始 ”柔“&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;曾国藩想起在长沙与绿营的龃龉斗法，与湖南官场的凿枘不合，想起在南昌与陈启迈、恽光宸的争强斗胜，这一切都是采取儒家直接、法家强权的方式。结果呢？表面上胜利了，实则埋下了更大的隐患。又如参清德、参陈启迈，越俎代庖、包揽干预种种情事，办理之时，固然痛快干脆，却没有想到锋芒毕露、刚烈太甚，伤害了清德、陈启迈的上上下下、左左右右，无形中给自己设置了许多障碍。这些隐患与障碍，如果不是自己亲身体验过，在书斋里、在六部签押房里是无论如何也设想不到的，它们对事业的损害，大大地超过了一时的风光和快意！既然直接的、以强对强的手法有时不能行得通，而迂回的、间接的、柔弱的方式也可以达到目的、战胜强者，且不至于留下隐患，为什么不采用呢？少年时代记住的诸如“大方无隅”“大音希声”“大象无形”“大巧若拙”的话，过去一直似懂非懂，现在一下子豁然开朗了。这些年来与官场内部以及与绿营的争斗，其实都是一种有隅之方，有声之音，有形之象，似巧实拙，真正的大方、大象、大巧不是这样的，它要做到全无形迹之嫌，全无斧凿之工。 “人之生也柔弱，其死也坚强，草木之生也柔脆，其死也枯槁。”柔弱、柔弱，天下万事万物，归根结底，莫不是以至柔克至刚。能克刚之柔，难道不是更刚吗？祖父“男儿以懦弱无刚为耻”的家训，自己竟片面理解了。曾国藩想到这里，兴奋地在《道德经》扉页上写下八个字：“大柔非柔，至刚无刚。”他觉得胸中的郁结解开了许多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;5老友胡林翼更好的体现了柔弱胜刚强&quot;&gt;5.老友胡林翼更好的体现了”柔弱胜刚强“&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;第二天一早，一顶花呢大轿将六姨太抬进巡抚衙门，胡太夫人、静娟夫人设盛宴款待，陪着玩牌听曲，扯家常。六姨太自幼丧母，见胡太夫人这样喜欢她，便认胡太夫人为母。胡太夫人高高兴兴地收下这个义女，又叫她拜见了兄长胡林翼。胡太夫人送给六姨太一副金镯金耳环金戒指，算是给义女的见面礼。六姨太回府后，在枕边对着官文说起胡家母子的千好万好。并说，从今以后两家认了亲，就是一家了，就不要再为难胡林翼了。官文对这个娇媚聪敏的六姨太向来百依百顺，果然从此再不给胡林翼找岔子了。军事民事，全付与胡林翼一手办理，他只在上面画诺而已；而胡林翼也表面上对他恭敬顺从。武昌城里督抚关系之亲密，为全国之首。 先前，曾国藩听到官胡这段故事后置之一笑。他笑胡林翼太软弱了，竟然用讨好一个姨太太的手腕来换取官文的合作，岂不太失堂堂大丈夫的气节！现在，他明白了，这正是胡林翼的高明之处，也是胡林翼胜过他的地方。“柔弱胜刚强”，胡林翼早已深懂此中之味，并运用得相当熟练了。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="读书笔记" /><summary type="html">最近在看《曾国藩》深有感触，记录下读书笔记 曾国藩， 从湖南湘乡荷叶塘的一个农家子弟完全靠自己的能力与见识拜相封侯，晚晴第一重臣。学习曾国藩的为人处世的方式将使我一生受益无穷 1. 肯下苦工 屋内背书5遍依然不会，而梁上君子已经可以背诵,年少的曾国藩并不太出众，但愿意下苦工来学习，正是这样的好习惯使得曾国藩一生受益，影响其做人，做官，带兵 2.曾国藩心细的表现 曾国藩来到养性殿。养性殿是皇宫收藏前代名人字画的宫殿，皇帝接见臣下，一般不在这里。守殿的大太监名叫过业大，人称大公公。国藩与大公公打声招呼后，便端坐在养性殿候驾。一坐整整两个时辰，时至正午，尚不见召，国藩心中犯疑，请大公公打听。一会儿，大公公告诉他：皇上今天不来了，明天在养心殿召见。 曾国藩是个心细的人，他回到家里，越想此事越蹊跷。在翰林院当差七年了，受皇上召见也有好几次，从来没有遇过这样的情况，也没有听说过有这样的事。他赶紧套上马车，去见恩师穆彰阿，请教此中原委。穆彰阿也觉得奇怪，详细询问事情的前前后后，和阗玉球在手中滚过百把圈后，他明白了。穆彰阿立即叫仆人带上三百两银子去找大公公，要大公公将养性殿内的陈设，尤其是四壁悬挂的字画，一幅不漏、一字不漏地抄出。夜间，大公公送来抄单。穆彰阿要曾国藩读熟记住 3.郭嵩焘对曾传授为人做官的方法 “你若像我这样，不在地方办事，又不带勇剿贼则罢，倘若指望办成大事，剿灭逆贼，你有些做法要改。” “旁观者清。我哪些地方做得不对，你就直言不讳吧！”曾国藩已感受到郭嵩焘的一片真心。 “第一，要联络好地方文武，不要总是站在与他们为敌的地位，当妥协处则妥协。常言说得好，强龙不压地头蛇。第二，越俎代庖之事不能再做，费力不讨好，反招怨敌。第三，要利用绿营的力量，不要再单枪匹马地干。若做到这三点，许多事情会办得好些。” 4.兵败后被高人指点, 从以前的“柔刚“ 开始 ”柔“ 曾国藩想起在长沙与绿营的龃龉斗法，与湖南官场的凿枘不合，想起在南昌与陈启迈、恽光宸的争强斗胜，这一切都是采取儒家直接、法家强权的方式。结果呢？表面上胜利了，实则埋下了更大的隐患。又如参清德、参陈启迈，越俎代庖、包揽干预种种情事，办理之时，固然痛快干脆，却没有想到锋芒毕露、刚烈太甚，伤害了清德、陈启迈的上上下下、左左右右，无形中给自己设置了许多障碍。这些隐患与障碍，如果不是自己亲身体验过，在书斋里、在六部签押房里是无论如何也设想不到的，它们对事业的损害，大大地超过了一时的风光和快意！既然直接的、以强对强的手法有时不能行得通，而迂回的、间接的、柔弱的方式也可以达到目的、战胜强者，且不至于留下隐患，为什么不采用呢？少年时代记住的诸如“大方无隅”“大音希声”“大象无形”“大巧若拙”的话，过去一直似懂非懂，现在一下子豁然开朗了。这些年来与官场内部以及与绿营的争斗，其实都是一种有隅之方，有声之音，有形之象，似巧实拙，真正的大方、大象、大巧不是这样的，它要做到全无形迹之嫌，全无斧凿之工。 “人之生也柔弱，其死也坚强，草木之生也柔脆，其死也枯槁。”柔弱、柔弱，天下万事万物，归根结底，莫不是以至柔克至刚。能克刚之柔，难道不是更刚吗？祖父“男儿以懦弱无刚为耻”的家训，自己竟片面理解了。曾国藩想到这里，兴奋地在《道德经》扉页上写下八个字：“大柔非柔，至刚无刚。”他觉得胸中的郁结解开了许多。 5.老友胡林翼更好的体现了”柔弱胜刚强“ 第二天一早，一顶花呢大轿将六姨太抬进巡抚衙门，胡太夫人、静娟夫人设盛宴款待，陪着玩牌听曲，扯家常。六姨太自幼丧母，见胡太夫人这样喜欢她，便认胡太夫人为母。胡太夫人高高兴兴地收下这个义女，又叫她拜见了兄长胡林翼。胡太夫人送给六姨太一副金镯金耳环金戒指，算是给义女的见面礼。六姨太回府后，在枕边对着官文说起胡家母子的千好万好。并说，从今以后两家认了亲，就是一家了，就不要再为难胡林翼了。官文对这个娇媚聪敏的六姨太向来百依百顺，果然从此再不给胡林翼找岔子了。军事民事，全付与胡林翼一手办理，他只在上面画诺而已；而胡林翼也表面上对他恭敬顺从。武昌城里督抚关系之亲密，为全国之首。 先前，曾国藩听到官胡这段故事后置之一笑。他笑胡林翼太软弱了，竟然用讨好一个姨太太的手腕来换取官文的合作，岂不太失堂堂大丈夫的气节！现在，他明白了，这正是胡林翼的高明之处，也是胡林翼胜过他的地方。“柔弱胜刚强”，胡林翼早已深懂此中之味，并运用得相当熟练了。</summary></entry><entry><title type="html">SpringBoot学习笔记</title><link href="http://localhost:4000/springBoot%E5%AD%A6%E4%B9%A0/" rel="alternate" type="text/html" title="SpringBoot学习笔记" /><published>2019-08-18T00:00:00+08:00</published><updated>2019-08-18T00:00:00+08:00</updated><id>http://localhost:4000/springBoot%E5%AD%A6%E4%B9%A0</id><content type="html" xml:base="http://localhost:4000/springBoot%E5%AD%A6%E4%B9%A0/">&lt;h3 id=&quot;记录学习springboot的过程&quot;&gt;记录学习SpringBoot的过程&lt;/h3&gt;

&lt;p&gt;Spring Boot是一个基于Java的开源框架，用于创建微服务&lt;/p&gt;

&lt;p&gt;SpringBoot的好处&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;避免在Spring中进行复杂的XML配置&lt;/li&gt;
  &lt;li&gt;以更简单的方式开发生产就绪的Spring应用程序&lt;/li&gt;
  &lt;li&gt;减少开发时间并独立运行应用程序&lt;/li&gt;
  &lt;li&gt;提供一种更简单的应用程序入门方式&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;正式开始springboot&quot;&gt;正式开始SpringBoot&lt;/h4&gt;

&lt;h5 id=&quot;1依赖springboot&quot;&gt;1.依赖SpringBoot&lt;/h5&gt;

&lt;p&gt;所有Spring Boot启动程序都遵循相同的命名模式&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot Starter Actuator依赖关系用于监视和管理应用程序。 其代码如下所示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Boot Starter Security依赖项用于Spring Security。 其代码如下所示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Spring Boot Starter Web依赖项用于编写Rest端点。 其代码如下所示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Boot Starter Thyme Leaf依赖项用于创建Web应用程序。 其代码如下所示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Spring Boot Starter Test依赖项用于编写测试用例。 其代码如下所示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2-代码结构&quot;&gt;2. 代码结构&lt;/h5&gt;

&lt;p&gt;Java推荐的包声明命名约定是反向域名。 例如 - com.jack.projectName&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;com
    +- jack
        +- projectName
            +- Application.java
            |
            +- Model / Bean
            |    +- Model.java
            +- Dao
            |    +- Mapper.java
            +- Controller
            |    +- Controller.java
            +- Service
            |    +- Service.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-构建restful项目&quot;&gt;3. 构建Restful项目&lt;/h5&gt;

&lt;p&gt;@RestController注释用于定义RESTful Web服务。它提供JSON，XML和自定义响应。其语法如下所&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RestController
public class UserController {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Java" /><summary type="html">记录学习SpringBoot的过程 Spring Boot是一个基于Java的开源框架，用于创建微服务 SpringBoot的好处 避免在Spring中进行复杂的XML配置 以更简单的方式开发生产就绪的Spring应用程序 减少开发时间并独立运行应用程序 提供一种更简单的应用程序入门方式 正式开始SpringBoot 1.依赖SpringBoot 所有Spring Boot启动程序都遵循相同的命名模式spring-boot-starter-* Spring Boot Starter Actuator依赖关系用于监视和管理应用程序。 其代码如下所示 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Spring Boot Starter Security依赖项用于Spring Security。 其代码如下所示 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Spring Boot Starter Web依赖项用于编写Rest端点。 其代码如下所示 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Spring Boot Starter Thyme Leaf依赖项用于创建Web应用程序。 其代码如下所示 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Spring Boot Starter Test依赖项用于编写测试用例。 其代码如下所示 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 代码结构 Java推荐的包声明命名约定是反向域名。 例如 - com.jack.projectName com +- jack +- projectName +- Application.java | +- Model / Bean | +- Model.java +- Dao | +- Mapper.java +- Controller | +- Controller.java +- Service | +- Service.java 3. 构建Restful项目 @RestController注释用于定义RESTful Web服务。它提供JSON，XML和自定义响应。其语法如下所 @RestController public class UserController { }</summary></entry><entry><title type="html">IM技术的整理</title><link href="http://localhost:4000/IM%E6%8A%80%E6%9C%AF%E7%9A%84%E6%95%B4%E7%90%86/" rel="alternate" type="text/html" title="IM技术的整理" /><published>2019-08-04T00:00:00+08:00</published><updated>2019-08-04T00:00:00+08:00</updated><id>http://localhost:4000/IM%E6%8A%80%E6%9C%AF%E7%9A%84%E6%95%B4%E7%90%86</id><content type="html" xml:base="http://localhost:4000/IM%E6%8A%80%E6%9C%AF%E7%9A%84%E6%95%B4%E7%90%86/">&lt;h2 id=&quot;通信协议&quot;&gt;通信协议&lt;/h2&gt;
&lt;p&gt;一套典型的IM通信协议设计分为三层：应用层、安全层、传输层&lt;/p&gt;

&lt;h3 id=&quot;im应用层协议&quot;&gt;IM应用层协议&lt;/h3&gt;
&lt;p&gt;应用层协议选型，常见的有三种：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;文本协议&lt;/li&gt;
  &lt;li&gt;二进制协议&lt;/li&gt;
  &lt;li&gt;流式XML协议&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1-文本协议&quot;&gt;1. 文本协议&lt;/h4&gt;
&lt;p&gt;文本协议是指 “贴近人类书面语言表达”的通讯传输协议，典型的是http&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: */*
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文本协议的特点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可读性好，便于调试&lt;/li&gt;
  &lt;li&gt;解析效率一般（按照:分割，key value形式）&lt;/li&gt;
  &lt;li&gt;对二进制支持不好(图片 / 视频 / 语音)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-二进制协议&quot;&gt;2. 二进制协议&lt;/h4&gt;
&lt;p&gt;二进制协议一般定长包头和可扩展变长包体 ，每个字段固定了含义 
例: IP协议的前4个bit表示协议版本号（Version）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://docs.52im.net/extend/docs/book/tcpip/vol1/3/images2/52im_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二进制协议特点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可读性差，难于调试&lt;/li&gt;
  &lt;li&gt;扩展性不好 ，如果要扩展字段，旧版协议就不兼容了，所以一般设计时会有一个Version字段&lt;/li&gt;
  &lt;li&gt;解析效率高(没有解析代价)&lt;/li&gt;
  &lt;li&gt;对二进制支持不好(图片 / 视频 / 语音)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-xml协议&quot;&gt;3. XML协议&lt;/h4&gt;
&lt;p&gt;XMPP使用XML协议，但XML使用太消耗流量&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;message
to=’[url=mailto:romeo@example.net]romeo@example.net[/url]’
from=’[url=mailto:juliet@example.com]juliet@example.com[/url]’
type=’chat’
xml : lang=’en’&amp;gt;
&amp;lt;body&amp;gt;Wherefore art thou, Romeo?&amp;lt;/body&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;XML协议特点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a. 它是准标准协议，可以跨域互通&lt;/li&gt;
  &lt;li&gt;b. XML的优点，可读性好，扩展性好&lt;/li&gt;
  &lt;li&gt;c. 解析代价超高（dom解析）&lt;/li&gt;
  &lt;li&gt;d. 有效数据传输率超低（大量的标签）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-实际使用协议&quot;&gt;4. 实际使用协议&lt;/h4&gt;
&lt;p&gt;一般常见的做法是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;定长二进制包头，可扩展变长包体。包体可以使用用文本、XML等扩展性好的协议。&lt;/li&gt;
  &lt;li&gt;包头负责传输和解析效率，与业务无关。包体保证扩展性，与业务相关。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//sizeof(cs_essay-header)=16
struct cs_essay-header{
    uint32_t version;
    uint32_t magic_num;
    uint32_t cmd;
    uint32_t len;
    uint8_t data[];
}__attribute__((packed));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;前4个字节是version&lt;/li&gt;
  &lt;li&gt;接下来的4个字节是个“魔法数字（magic_num）， 包头放几个约定好的特殊字符，包尾放几个约定好的特殊字符 约定好，发给你的协议，某几个字节位置，是0x 01020304 ，才是正常报文&lt;/li&gt;
  &lt;li&gt;接下来是command（命令号），用来区分是keepalive报文、业务报文、密钥交换报文等&lt;/li&gt;
  &lt;li&gt;len（包体长度），告知服务端要接收多长的包体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google开源的ProtoBuf协议具有更多有点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;现成的解析库种类多&lt;/li&gt;
  &lt;li&gt;现成的解析库种类多&lt;/li&gt;
  &lt;li&gt;在工业界已广泛应用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例： 登录请求包传入的是用户名与密码，登录响应包返回的是用户的uid&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message CUserLoginReq{
    optional string username = 1;
    optional string passwd = 2;
}

message CUserLoginResp{
    optional uint64 uid =1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;im安全层&quot;&gt;IM安全层&lt;/h3&gt;

&lt;p&gt;im协议，消息的保密性非常重要 ，谁都不希望自己聊天内容被看到，所以安全层是必不可少的&lt;/p&gt;

&lt;h5 id=&quot;ssl加密&quot;&gt;SSL加密&lt;/h5&gt;
&lt;p&gt;证书管理麻烦，代价比较高&lt;/p&gt;
&lt;h5 id=&quot;自定义加密策略&quot;&gt;自定义加密策略&lt;/h5&gt;
&lt;p&gt;自定义加密核心在于秘钥的生成，管理， 秘钥的管理大概有三种方式&lt;/p&gt;
&lt;h6 id=&quot;固定秘钥&quot;&gt;固定秘钥&lt;/h6&gt;
&lt;p&gt;服务端和客户端约定好一个密钥，同时约定好一个加密算法（eg：AES ），每次客户端im在发送前，就用约定好的算法，以及约定好的密钥加密再传输，服务端收到报文后，用约定好的算法，约定好的密钥再解密。这种方式，密钥和算法对程序员都是透明的。&lt;/p&gt;
&lt;h6 id=&quot;一人一秘钥&quot;&gt;一人一秘钥&lt;/h6&gt;
&lt;p&gt;简单说来就是每个人的密钥是固定的，但是每个人之间又不同，其实就是在固定密钥的算法中包含用户的某一特殊属性，比如用户uid、手机号、qq号等。&lt;/p&gt;
&lt;h6 id=&quot;动态秘钥&quot;&gt;动态秘钥&lt;/h6&gt;
&lt;p&gt;动态密钥，一Session一密钥的安全性更高，每次会话前协商密钥。密钥协商的过程要经过2次非对称密钥的随机生成，1次对称加密密钥的随机生成&lt;/p&gt;

&lt;h3 id=&quot;im传输层&quot;&gt;IM传输层&lt;/h3&gt;
&lt;p&gt;TCP / UDP&lt;/p&gt;

&lt;p&gt;一般大厂的做法的TCP和UDP混合使用&lt;/p&gt;

&lt;p&gt;“无线环境下，UDP更好，可以做到状态无关，而TCP不稳定，进出电梯就要断线，用户体验不好”&lt;/p&gt;</content><author><name></name></author><category term="架构" /><summary type="html">通信协议 一套典型的IM通信协议设计分为三层：应用层、安全层、传输层 IM应用层协议 应用层协议选型，常见的有三种： 文本协议 二进制协议 流式XML协议 1. 文本协议 文本协议是指 “贴近人类书面语言表达”的通讯传输协议，典型的是http Accept: */* User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 文本协议的特点 可读性好，便于调试 解析效率一般（按照:分割，key value形式） 对二进制支持不好(图片 / 视频 / 语音) 2. 二进制协议 二进制协议一般定长包头和可扩展变长包体 ，每个字段固定了含义 例: IP协议的前4个bit表示协议版本号（Version） 二进制协议特点 可读性差，难于调试 扩展性不好 ，如果要扩展字段，旧版协议就不兼容了，所以一般设计时会有一个Version字段 解析效率高(没有解析代价) 对二进制支持不好(图片 / 视频 / 语音) 3. XML协议 XMPP使用XML协议，但XML使用太消耗流量 &amp;lt;message to=’[url=mailto:romeo@example.net]romeo@example.net[/url]’ from=’[url=mailto:juliet@example.com]juliet@example.com[/url]’ type=’chat’ xml : lang=’en’&amp;gt; &amp;lt;body&amp;gt;Wherefore art thou, Romeo?&amp;lt;/body&amp;gt; &amp;lt;/message&amp;gt; XML协议特点 a. 它是准标准协议，可以跨域互通 b. XML的优点，可读性好，扩展性好 c. 解析代价超高（dom解析） d. 有效数据传输率超低（大量的标签） 4. 实际使用协议 一般常见的做法是： 定长二进制包头，可扩展变长包体。包体可以使用用文本、XML等扩展性好的协议。 包头负责传输和解析效率，与业务无关。包体保证扩展性，与业务相关。 //sizeof(cs_essay-header)=16 struct cs_essay-header{ uint32_t version; uint32_t magic_num; uint32_t cmd; uint32_t len; uint8_t data[]; }__attribute__((packed)); 前4个字节是version 接下来的4个字节是个“魔法数字（magic_num）， 包头放几个约定好的特殊字符，包尾放几个约定好的特殊字符 约定好，发给你的协议，某几个字节位置，是0x 01020304 ，才是正常报文 接下来是command（命令号），用来区分是keepalive报文、业务报文、密钥交换报文等 len（包体长度），告知服务端要接收多长的包体 Google开源的ProtoBuf协议具有更多有点 现成的解析库种类多 现成的解析库种类多 在工业界已广泛应用 例： 登录请求包传入的是用户名与密码，登录响应包返回的是用户的uid message CUserLoginReq{ optional string username = 1; optional string passwd = 2; } message CUserLoginResp{ optional uint64 uid =1; } IM安全层 im协议，消息的保密性非常重要 ，谁都不希望自己聊天内容被看到，所以安全层是必不可少的 SSL加密 证书管理麻烦，代价比较高 自定义加密策略 自定义加密核心在于秘钥的生成，管理， 秘钥的管理大概有三种方式 固定秘钥 服务端和客户端约定好一个密钥，同时约定好一个加密算法（eg：AES ），每次客户端im在发送前，就用约定好的算法，以及约定好的密钥加密再传输，服务端收到报文后，用约定好的算法，约定好的密钥再解密。这种方式，密钥和算法对程序员都是透明的。 一人一秘钥 简单说来就是每个人的密钥是固定的，但是每个人之间又不同，其实就是在固定密钥的算法中包含用户的某一特殊属性，比如用户uid、手机号、qq号等。 动态秘钥 动态密钥，一Session一密钥的安全性更高，每次会话前协商密钥。密钥协商的过程要经过2次非对称密钥的随机生成，1次对称加密密钥的随机生成 IM传输层 TCP / UDP 一般大厂的做法的TCP和UDP混合使用 “无线环境下，UDP更好，可以做到状态无关，而TCP不稳定，进出电梯就要断线，用户体验不好”</summary></entry><entry><title type="html">复盘内存管理</title><link href="http://localhost:4000/%E5%A4%8D%E7%9B%98%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/" rel="alternate" type="text/html" title="复盘内存管理" /><published>2019-07-28T00:00:00+08:00</published><updated>2019-07-28T00:00:00+08:00</updated><id>http://localhost:4000/%E5%A4%8D%E7%9B%98%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86</id><content type="html" xml:base="http://localhost:4000/%E5%A4%8D%E7%9B%98%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/">&lt;h3 id=&quot;复盘动态内存管理机制&quot;&gt;复盘动态内存管理机制&lt;/h3&gt;

&lt;p&gt;对于内存两大问题&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;向系统提出的申请空间的请求，系统如何分配内存？&lt;/li&gt;
  &lt;li&gt;在完成使用之前申请的内存空间后，系统又如何回收？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;占用块和空闲块&quot;&gt;占用块和空闲块&lt;/h4&gt;
&lt;p&gt;对于计算机的内存来说，对已经分配使用的内存区称为“占用块”，还未分配出去的内存区统称为“空闲块”或者“可利用空间块”&lt;/p&gt;

&lt;h4 id=&quot;堆&quot;&gt;堆&lt;/h4&gt;
&lt;p&gt;对于初始状态下的内存来说，整个空间都是一个空闲块（在编译程序中称为“堆”）。但是随着不同的用户不断地提出存储请求，系统依次分配&lt;/p&gt;

&lt;h4 id=&quot;系统的内存管理&quot;&gt;系统的内存管理&lt;/h4&gt;
&lt;p&gt;整个内存区就会分割成两个大部分：低地址区域会产生很多占用块；高地址区域还是空闲块
&lt;img src=&quot;http://data.biancheng.net/uploads/allimg/170928/2-1F92P94501539.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是当某些用户运行结束，所占用的内存区域就变成了空闲块
&lt;img src=&quot;http://data.biancheng.net/uploads/allimg/170928/2-1F92P94524502.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就形成了空闲快和占用块交错的情况，系统对于后续的内存分配就有了两种分配方式&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;系统继续将高内存地址分配给新的内存申请&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当用户运行结束，系统将其内存空间进行回收，当有新的用户请求分配内存时，系统遍历所有的空闲块，从中找出一个合适的空闲块分配给用户&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;分配存储空间的方式&quot;&gt;分配存储空间的方式&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首次拟合法：在可利用空间表中从头开始依次遍历，将找到的第一个内存不小于用户申请空间的结点分配给用户，剩余空间仍留在链表中；回收时只要将释放的空闲块插入在链表的表头即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最佳拟合法：和首次拟合法不同，最佳拟合法是选择一块内存空间不小于用户申请空间，但是却最接近的一个结点分配给用户。为了实现这个方法，首先要将链表中的各个结点按照存储空间的大小进行从小到大排序，由此，在遍历的过程中只需要找到第一块大于用户申请空间的结点即可进行分配；用户运行完成后，需要将空闲块根据其自身的大小插入到链表的相应位置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最差拟合法：和最佳拟合法正好相反，该方法是在不小于用户申请空间的所有结点中，筛选出存储空间最大的结点，从该结点的内存空间中提取出相应的空间给用户使用。为了实现这一方法，可以在开始前先将可利用空间表中的结点按照存储空间大小从大到小进行排序，第一个结点自然就是最大的结点。回收空间时，同样将释放的空闲块插入到相应的位置上。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上三种方法中，最佳拟合法无论是分配过程还是回收过程，都需要遍历链表，所以效率最低&lt;/p&gt;</content><author><name></name></author><category term="数据结构" /><summary type="html">复盘动态内存管理机制 对于内存两大问题 向系统提出的申请空间的请求，系统如何分配内存？ 在完成使用之前申请的内存空间后，系统又如何回收？ 占用块和空闲块 对于计算机的内存来说，对已经分配使用的内存区称为“占用块”，还未分配出去的内存区统称为“空闲块”或者“可利用空间块” 堆 对于初始状态下的内存来说，整个空间都是一个空闲块（在编译程序中称为“堆”）。但是随着不同的用户不断地提出存储请求，系统依次分配 系统的内存管理 整个内存区就会分割成两个大部分：低地址区域会产生很多占用块；高地址区域还是空闲块 但是当某些用户运行结束，所占用的内存区域就变成了空闲块 这样就形成了空闲快和占用块交错的情况，系统对于后续的内存分配就有了两种分配方式 系统继续将高内存地址分配给新的内存申请 当用户运行结束，系统将其内存空间进行回收，当有新的用户请求分配内存时，系统遍历所有的空闲块，从中找出一个合适的空闲块分配给用户 分配存储空间的方式 首次拟合法：在可利用空间表中从头开始依次遍历，将找到的第一个内存不小于用户申请空间的结点分配给用户，剩余空间仍留在链表中；回收时只要将释放的空闲块插入在链表的表头即可。 最佳拟合法：和首次拟合法不同，最佳拟合法是选择一块内存空间不小于用户申请空间，但是却最接近的一个结点分配给用户。为了实现这个方法，首先要将链表中的各个结点按照存储空间的大小进行从小到大排序，由此，在遍历的过程中只需要找到第一块大于用户申请空间的结点即可进行分配；用户运行完成后，需要将空闲块根据其自身的大小插入到链表的相应位置。 最差拟合法：和最佳拟合法正好相反，该方法是在不小于用户申请空间的所有结点中，筛选出存储空间最大的结点，从该结点的内存空间中提取出相应的空间给用户使用。为了实现这一方法，可以在开始前先将可利用空间表中的结点按照存储空间大小从大到小进行排序，第一个结点自然就是最大的结点。回收空间时，同样将释放的空闲块插入到相应的位置上。 以上三种方法中，最佳拟合法无论是分配过程还是回收过程，都需要遍历链表，所以效率最低</summary></entry><entry><title type="html">Kingfisher框架分析</title><link href="http://localhost:4000/Kingfisher%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/" rel="alternate" type="text/html" title="Kingfisher框架分析" /><published>2019-07-21T00:00:00+08:00</published><updated>2019-07-21T00:00:00+08:00</updated><id>http://localhost:4000/Kingfisher%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/Kingfisher%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/">&lt;h3 id=&quot;kingfisher框架的内部实现解读&quot;&gt;Kingfisher框架的内部实现解读&lt;/h3&gt;
&lt;p&gt;Kingfisher 是由 onevcat 编写的用于下载和缓存网络图片的轻量级Swift工具库，其中涉及到了包括GCD、Swift高级语法、缓存、硬盘读写、网络编程、图像编码、图形绘制、Gif数据生成和处理、MD5、Associated Objects的使用等大量iOS开发知识&lt;/p&gt;

&lt;h4 id=&quot;一kingfisher的架构&quot;&gt;一、Kingfisher的架构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2016/11/30/8a440adc43cd3da2b46c16f9ffb8c087&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UIImage+Extension 文件内部对 UIImage 以及 NSData 进行了拓展, 包含判定图片类型、图片解码以及Gif数据处理等操作。&lt;/p&gt;

&lt;p&gt;String+MD5 负责图片缓存时对文件名进行MD5加密操作。&lt;/p&gt;

&lt;p&gt;ImageCache 主要负责将加载过的图片缓存至本地。&lt;/p&gt;

&lt;p&gt;ImageDownloader 负责下载网络图片。&lt;/p&gt;

&lt;p&gt;KingfisherOptions 内含配置 Kingfisher 行为的部分参数，包括是否设置下载低优先级、是否强制刷新、是否仅缓存至内存、是否允许图像后台解码等设置。&lt;/p&gt;

&lt;p&gt;Resource 中的 Resource 结构体记录了图片的下载地址和缓存Key。&lt;/p&gt;

&lt;p&gt;ImageTransition 文件中的动画效果将在使用 UIImageView 的拓展 API 时被采用，其底层为UIViewAnimationOptions，此外你也可以自己传入相应地动画操作、完成闭包来配置自己的动画效果。&lt;/p&gt;

&lt;p&gt;ThreadHelper 中的dispatch_async_safely_main_queue 函数接受一个闭包，利用 NSThread.isMainThread 判定并将其放置在主线程中执行。&lt;/p&gt;

&lt;p&gt;KingfisherManager 是 Kingfisher 的主控制类，整合了图片下载及缓存操作。&lt;/p&gt;

&lt;p&gt;KingfisherOptionsInfoItem 被提供给开发者对 Kingfisher 的各种行为进行控制，包含下载设置、缓存设置、动画设置以及 KingfisherOptions 中的全部配置参数。&lt;/p&gt;

&lt;p&gt;UIImage+Kingfisher 以及 UIButton+Kingfisher 对 UIImageView 和 UIButton 进行了拓展，即主要用于提供 Kingfisher 的外部接口。&lt;/p&gt;

&lt;h4 id=&quot;二-kingfisher的入口&quot;&gt;二、 Kingfisher的入口&lt;/h4&gt;

&lt;p&gt;我们在使用Kingfisher时，是这样调用的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imageView.kf.setImage(with: URL(string: imageUrl), placeholder: UIImage(named: &quot;img_default_medium&quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;kf是kingfisher.swift中 对UIImageView和UIButton的extension中都实现了KingfisherCompatible的Protocol， Protocol中定义了kf变量，用来标识当前的调用类型&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 A type that has Kingfisher extensions.
 */
public protocol KingfisherCompatible {

    associatedtype CompatibleType

    var kf: Self.CompatibleType { get }
}

extension KingfisherCompatible {

    public var kf: Kingfisher.Kingfisher&amp;lt;Self&amp;gt; { get }
}

extension ImageView: KingfisherCompatible { }
extension Button: KingfisherCompatible { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在UIImageView和UIButton的extension中有以上方法，供外部使用的API，快速设置网络图片，我们看到传入的的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt;类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public func setImage(with resource: Resource?,
                         placeholder: Placeholder? = nil,
                         options: KingfisherOptionsInfo? = nil,
                         progressBlock: DownloadProgressBlock? = nil,
                         completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到Resource是一个Protocol, 在Protocol中定义了URL和cacheKey, 在URL的extension中实现了Resource协议，所以我们只需传入URL对象即可&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public protocol Resource {
    /// The key used in cache.
    var cacheKey: String { get }
    
    /// The target image URL.
    var downloadURL: URL { get }
}

extension URL: Resource {
    public var cacheKey: String { return absoluteString }
    public var downloadURL: URL { return self }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;三具体分析kingfisher的工作原理&quot;&gt;三、具体分析Kingfisher的工作原理&lt;/h4&gt;
&lt;p&gt;先判断Resource是否为空， 如果为空，直接return RetrieveImageTask.empty&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public func setImage(with resource: Resource?,
                         placeholder: Placeholder? = nil,
                         options: KingfisherOptionsInfo? = nil,
                         progressBlock: DownloadProgressBlock? = nil,
                         completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask
    {
        guard let resource = resource else {
            self.placeholder = placeholder
            setWebURL(nil)
            completionHandler?(nil, nil, .none, nil)
            return .empty
        }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们来具体看Kingfisher的对于一张未下载图片的工作流&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. UIView的Extension，提供API调用
func setImage(with resource: Resource?,
                         placeholder: Placeholder? = nil,
                         options: KingfisherOptionsInfo? = nil,
                         progressBlock: DownloadProgressBlock? = nil,
                         completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask
                
                         
// 2. 尝试从缓存中获取Image            
func retrieveImage(with resource: Resource,
        options: KingfisherOptionsInfo?,
        progressBlock: DownloadProgressBlock?,
        completionHandler: CompletionHandler?) -&amp;gt; RetrieveImageTask
        
// 3. 创建ImageDownloader，来下载Image
func downloadAndCacheImage(with url: URL,
                             forKey key: String,
                      retrieveImageTask: RetrieveImageTask,
                          progressBlock: DownloadProgressBlock?,
                      completionHandler: CompletionHandler?,
                                options: KingfisherOptionsInfo) -&amp;gt; RetrieveImageDownloadTask?
          
// 4. Download                               
open func downloadImage(with url: URL,
                       retrieveImageTask: RetrieveImageTask? = nil,
                       options: KingfisherOptionsInfo? = nil,
                       progressBlock: ImageDownloaderProgressBlock? = nil,
                       completionHandler: ImageDownloaderCompletionHandler? = nil) -&amp;gt; RetrieveImageDownloadTask?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载的核心流程, 来自&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageDownloader&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. 
 var request = URLRequest(url: url, cachePolicy: .reloadIgnoringLocalCacheData, timeoutInterval: timeout)  
 
// 2. ImageDownloader内部 创建了多个队列
barrierQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Barrier.\(name)&quot;, attributes: .concurrent)

processQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Process.\(name)&quot;, attributes: .concurrent)

cancelQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Cancel.\(name)&quot;)                 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="iOS" /><category term="Swift" /><summary type="html">Kingfisher框架的内部实现解读 Kingfisher 是由 onevcat 编写的用于下载和缓存网络图片的轻量级Swift工具库，其中涉及到了包括GCD、Swift高级语法、缓存、硬盘读写、网络编程、图像编码、图形绘制、Gif数据生成和处理、MD5、Associated Objects的使用等大量iOS开发知识 一、Kingfisher的架构 UIImage+Extension 文件内部对 UIImage 以及 NSData 进行了拓展, 包含判定图片类型、图片解码以及Gif数据处理等操作。 String+MD5 负责图片缓存时对文件名进行MD5加密操作。 ImageCache 主要负责将加载过的图片缓存至本地。 ImageDownloader 负责下载网络图片。 KingfisherOptions 内含配置 Kingfisher 行为的部分参数，包括是否设置下载低优先级、是否强制刷新、是否仅缓存至内存、是否允许图像后台解码等设置。 Resource 中的 Resource 结构体记录了图片的下载地址和缓存Key。 ImageTransition 文件中的动画效果将在使用 UIImageView 的拓展 API 时被采用，其底层为UIViewAnimationOptions，此外你也可以自己传入相应地动画操作、完成闭包来配置自己的动画效果。 ThreadHelper 中的dispatch_async_safely_main_queue 函数接受一个闭包，利用 NSThread.isMainThread 判定并将其放置在主线程中执行。 KingfisherManager 是 Kingfisher 的主控制类，整合了图片下载及缓存操作。 KingfisherOptionsInfoItem 被提供给开发者对 Kingfisher 的各种行为进行控制，包含下载设置、缓存设置、动画设置以及 KingfisherOptions 中的全部配置参数。 UIImage+Kingfisher 以及 UIButton+Kingfisher 对 UIImageView 和 UIButton 进行了拓展，即主要用于提供 Kingfisher 的外部接口。 二、 Kingfisher的入口 我们在使用Kingfisher时，是这样调用的 imageView.kf.setImage(with: URL(string: imageUrl), placeholder: UIImage(named: &quot;img_default_medium&quot;)) kf是kingfisher.swift中 对UIImageView和UIButton的extension中都实现了KingfisherCompatible的Protocol， Protocol中定义了kf变量，用来标识当前的调用类型 /** A type that has Kingfisher extensions. */ public protocol KingfisherCompatible { associatedtype CompatibleType var kf: Self.CompatibleType { get } } extension KingfisherCompatible { public var kf: Kingfisher.Kingfisher&amp;lt;Self&amp;gt; { get } } extension ImageView: KingfisherCompatible { } extension Button: KingfisherCompatible { } 在UIImageView和UIButton的extension中有以上方法，供外部使用的API，快速设置网络图片，我们看到传入的的是Resource类型 public func setImage(with resource: Resource?, placeholder: Placeholder? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: DownloadProgressBlock? = nil, completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask 可以看到Resource是一个Protocol, 在Protocol中定义了URL和cacheKey, 在URL的extension中实现了Resource协议，所以我们只需传入URL对象即可 public protocol Resource { /// The key used in cache. var cacheKey: String { get } /// The target image URL. var downloadURL: URL { get } } extension URL: Resource { public var cacheKey: String { return absoluteString } public var downloadURL: URL { return self } } 三、具体分析Kingfisher的工作原理 先判断Resource是否为空， 如果为空，直接return RetrieveImageTask.empty public func setImage(with resource: Resource?, placeholder: Placeholder? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: DownloadProgressBlock? = nil, completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask { guard let resource = resource else { self.placeholder = placeholder setWebURL(nil) completionHandler?(nil, nil, .none, nil) return .empty } } 我们来具体看Kingfisher的对于一张未下载图片的工作流 // 1. UIView的Extension，提供API调用 func setImage(with resource: Resource?, placeholder: Placeholder? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: DownloadProgressBlock? = nil, completionHandler: CompletionHandler? = nil) -&amp;gt; RetrieveImageTask // 2. 尝试从缓存中获取Image func retrieveImage(with resource: Resource, options: KingfisherOptionsInfo?, progressBlock: DownloadProgressBlock?, completionHandler: CompletionHandler?) -&amp;gt; RetrieveImageTask // 3. 创建ImageDownloader，来下载Image func downloadAndCacheImage(with url: URL, forKey key: String, retrieveImageTask: RetrieveImageTask, progressBlock: DownloadProgressBlock?, completionHandler: CompletionHandler?, options: KingfisherOptionsInfo) -&amp;gt; RetrieveImageDownloadTask? // 4. Download open func downloadImage(with url: URL, retrieveImageTask: RetrieveImageTask? = nil, options: KingfisherOptionsInfo? = nil, progressBlock: ImageDownloaderProgressBlock? = nil, completionHandler: ImageDownloaderCompletionHandler? = nil) -&amp;gt; RetrieveImageDownloadTask? 下载的核心流程, 来自ImageDownloader // 1. var request = URLRequest(url: url, cachePolicy: .reloadIgnoringLocalCacheData, timeoutInterval: timeout) // 2. ImageDownloader内部 创建了多个队列 barrierQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Barrier.\(name)&quot;, attributes: .concurrent) processQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Process.\(name)&quot;, attributes: .concurrent) cancelQueue = DispatchQueue(label: &quot;com.onevcat.Kingfisher.ImageDownloader.Cancel.\(name)&quot;)</summary></entry><entry><title type="html">查理芒格传读书笔记</title><link href="http://localhost:4000/%E6%9F%A5%E7%90%86%E8%8A%92%E6%A0%BC%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="查理芒格传读书笔记" /><published>2019-07-14T00:00:00+08:00</published><updated>2019-07-14T00:00:00+08:00</updated><id>http://localhost:4000/%E6%9F%A5%E7%90%86%E8%8A%92%E6%A0%BC%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/%E6%9F%A5%E7%90%86%E8%8A%92%E6%A0%BC%E4%BC%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">&lt;h3 id=&quot;记录在看查理芒格传的笔记&quot;&gt;记录在看《查理·芒格传》的笔记&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;你一定要和高水准的人做生意，永远不要和一头猪玩摔跤，因为如果你这么做了，你们两个都会变脏，但是猪会乐在其中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;好企业和差企业之间的区别在于，在好企业里你会做出一个接一个的轻松决定，而差企业的决定则常常是痛苦万分的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我本人是一个传记狂，比如你要是和亚当•斯密成了朋友，那你一定会把经济学得更好。跟离世的伟人交朋友，这听起来很滑稽，但如果你一生都这样做，你会受益匪浅。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;投资游戏说到底就是要比其他人对未来做出更准确的预言。要如何做到呢？一种方法是将这种竞争在有限的几个区域中进行。如果你试图预言所有事情的未来，你会因为缺乏专长而失败。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你想变得聪明，你就必须不停地问为什么？为什么？为什么？同时你还必须将答案和有条理的深层理论联系起来。你必须知道那些最主要的理论。这稍微会有些费力，但充满乐趣。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们大多数人做决策时都会存在一个问题：不考虑这个决策可能带来的长远影响。这时，你可以根据 10 → 10 → 10 原则来考虑所做的决策可能带来的长远影响。这个原则就是：&lt;br /&gt;
这个决策在 10 分钟后，会产生什么影响？&lt;br /&gt;
这个决策在 10 个月后，会产生什么影响？&lt;br /&gt;
这个决策在 10 年后，会产生什么影响？&lt;br /&gt;
在做决策时如果能践行 10 → 10 → 10 原则，这将有助于你在决策时免受感性因素的影响，迫使你考虑到这个决策可能会带来的长远影响，从而做出更加明智的决策&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="金融" /><category term="读书笔记" /><summary type="html">记录在看《查理·芒格传》的笔记 你一定要和高水准的人做生意，永远不要和一头猪玩摔跤，因为如果你这么做了，你们两个都会变脏，但是猪会乐在其中 好企业和差企业之间的区别在于，在好企业里你会做出一个接一个的轻松决定，而差企业的决定则常常是痛苦万分的。 我本人是一个传记狂，比如你要是和亚当•斯密成了朋友，那你一定会把经济学得更好。跟离世的伟人交朋友，这听起来很滑稽，但如果你一生都这样做，你会受益匪浅。 投资游戏说到底就是要比其他人对未来做出更准确的预言。要如何做到呢？一种方法是将这种竞争在有限的几个区域中进行。如果你试图预言所有事情的未来，你会因为缺乏专长而失败。 如果你想变得聪明，你就必须不停地问为什么？为什么？为什么？同时你还必须将答案和有条理的深层理论联系起来。你必须知道那些最主要的理论。这稍微会有些费力，但充满乐趣。 我们大多数人做决策时都会存在一个问题：不考虑这个决策可能带来的长远影响。这时，你可以根据 10 → 10 → 10 原则来考虑所做的决策可能带来的长远影响。这个原则就是： 这个决策在 10 分钟后，会产生什么影响？ 这个决策在 10 个月后，会产生什么影响？ 这个决策在 10 年后，会产生什么影响？ 在做决策时如果能践行 10 → 10 → 10 原则，这将有助于你在决策时免受感性因素的影响，迫使你考虑到这个决策可能会带来的长远影响，从而做出更加明智的决策</summary></entry><entry><title type="html">财报入门学习</title><link href="http://localhost:4000/%E8%B4%A2%E6%8A%A5%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/" rel="alternate" type="text/html" title="财报入门学习" /><published>2019-07-07T00:00:00+08:00</published><updated>2019-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E8%B4%A2%E6%8A%A5%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0</id><content type="html" xml:base="http://localhost:4000/%E8%B4%A2%E6%8A%A5%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/">&lt;h4 id=&quot;记录金融入门学习&quot;&gt;记录金融入门学习&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;巴菲特：&lt;/strong&gt;买股票的本质是投资公司&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;彼得林奇：&lt;/strong&gt;当你读不懂某一公司的财务情况时，不要投资。股市的最大的亏损源于投资了在资产负债方面很糟糕的公司。先看资产负债表，搞清该公司是否有偿债能力，然后再投钱冒险&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;金融书籍记录&quot;&gt;金融书籍记录&lt;/h5&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;彼得林奇 &lt;在华尔街的崛起&gt;&lt;/在华尔街的崛起&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;查理芒格 &lt;查理芒格传&gt;&lt;/查理芒格传&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;瑞达利欧 &lt;原则&gt;&lt;/原则&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;财务报表学习&quot;&gt;财务报表学习&lt;/h5&gt;
&lt;p&gt;财务报表分三类&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;利润表&lt;/li&gt;
  &lt;li&gt;资产负债表&lt;/li&gt;
  &lt;li&gt;现金流量表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在看公司公司财报前，先看会计师审计报告，在年报的第十一节，《审计意见》，审计意见反映了审计师的心声
&lt;img src=&quot;http://fdfs.xmcdn.com/group49/M0A/82/E6/wKgKl1vyIimQcOpPAAFtInzQd2A978_mobile_large.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;利润表&quot;&gt;利润表&lt;/h5&gt;
&lt;p&gt;形象解释
&lt;img src=&quot;http://fdfs.xmcdn.com/group53/M09/02/0A/wKgLfFv7l6OyBzn2AAFRrI5yisI426_mobile_large.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;净利润中包含了企业的应收账款，所以并不能单单以净利润在决定公司运营好坏，还需结合现金流量表和资产负债表&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;扣非净利润&lt;/li&gt;
  &lt;li&gt;归属于母公司所有者的净利润&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;资产负债表&quot;&gt;资产负债表&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;资产&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;负债&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;流动资产&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;说明&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;非流动资产&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;说明&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;负债&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;说明&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;所有者权益&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;说明&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;货币资金&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;企业的现金存款&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;固定资产&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;非货币资产，(房屋，设备，机器等)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;银行负债&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;银行贷款&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;股东出钱&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;应收账款&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;发了货，还没结账，(坏账准备)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;生物性资产&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;农林牧渔行业&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;存货&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;看行业，更新快的行业存货少好&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无形资产&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;专利权，著作权，土地使用权&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表格在手机上会有变形，截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/07/12/ZfWbHP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fdfs.xmcdn.com/group53/M07/D7/2D/wKgLcVwKI92jI9JaAAGHfFHmyt0046_mobile_large.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;现金流量表&quot;&gt;现金流量表&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;序号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;类别&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;经营活动产生的现金流量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;利润表收入支出现金的变化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;投资活动产生的现金流量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;资产负债表的固定资产变动情况&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;筹资活动产生的现金流量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;资产负债表的负债和所有者权益变动情况&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&quot;1-经营活动现金流&quot;&gt;1. 经营活动现金流&lt;/h6&gt;
&lt;p&gt;有公开数据的企业，直接看企业经营活动产生的现金流，这是现金流量表的核心。因为刚刚我们刚讲了，企业的经营能力才是我们投资者最应该看重的。而经营活动现金流，就代表着经营能力的强弱。&lt;/p&gt;

&lt;p&gt;如果经营活动现金流量净额，长期为负的话（银行证券保险除外），代表企业日子不太好过，入不敷出，这类企业不用考虑投资。只有经营活动现金流量净额是正数，说明它才是一家正常的企业。&lt;/p&gt;

&lt;h6 id=&quot;2-投资活动现金流&quot;&gt;2. 投资活动现金流&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://fdfs.xmcdn.com/group52/M01/59/BF/wKgLcFwZzTmDkUDgAAFRpaHBRiY184_mobile_large.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;3-筹资活动中了解企业的融资情况&quot;&gt;3. 筹资活动中了解企业的融资情况&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://fdfs.xmcdn.com/group52/M01/59/E3/wKgLe1wZzTqS3C3gAADXdXRFjFY717_mobile_large.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;类型一的企业&quot;&gt;类型一、“+++”的企业&lt;/h6&gt;

&lt;p&gt;三项都为正的企业。表明上看起来，这样的公司特别不错。经营活动现金为正数，现金源源不断。但是有一个问题，就是企业经营赚了钱以后，为什么不向外投资呢？反而还需要筹资呢？难道都把钱放在银行账户上数钱玩吗？这类型的企业，要么就是即将大规模的开展对外大规模的投资活动，所以在筹集本钱。要么就很可能是起了歹心，借着上市公司的躯壳在赚钱。所以，如果是这三项都是正的企业，建议我们要谨慎观察一下。如果查阅很多材料，都看不出来企业有大投资的动作。建议这类型的企业，我们也淘汰掉。&lt;/p&gt;

&lt;h6 id=&quot;类型二-的企业&quot;&gt;类型二、“++-”的企业&lt;/h6&gt;

&lt;p&gt;这类型的企业，经营活动现金流为正，说明企业经营情况还不错。投资活动现金流为正，说明以前投资的资产，带来了利息等方面的收入。或者是变卖了资产，产生了收入。一般来说，资产带来的收益比较多，因为企业变卖资产的情况很小。筹资活动现金流为负数，要么就是还了贷款，要么就是给股东分红。这类的企业，如果投资现金流，不是变卖资产所得。而经营现金流和投资现金流，足以覆盖筹资现金流的流出。我们就可以初步判断，这家公司是健康发展的。&lt;/p&gt;

&lt;h6 id=&quot;类型三-的企业&quot;&gt;类型三、“+-+”的企业&lt;/h6&gt;

&lt;p&gt;这类企业，经营活动现金流同样为正，说明企业赚钱。同时筹资活动现金流为正，但是投资活动现金流是负。说明企业现在正在大力的扩大规模。需要把钱投入到新的项目中。这类企业有一个问题，就是所投资的项目如果创造辉煌，企业会高速的增长。反之，企业如果投资失败，会影响企业后期的发展。&lt;/p&gt;

&lt;p&gt;这类型的企业，很考验我们对行业发展的一个判断。&lt;/p&gt;

&lt;h6 id=&quot;类型四的企业&quot;&gt;类型四、“+–”的企业&lt;/h6&gt;

&lt;p&gt;经营活动现金流为正，同样说明企业赚钱。投资活动现金流为负，说明企业也在稳步的扩张。筹资活动现金流为负，说明企业还了贷款，或者给股东分红了。也就是说，企业靠着经营现金流的流入，实施了投资，并且同时还了贷款或给股东分红。这类型的企业是四种画像里面最好的企业，这种企业自我造血能力最强。靠着自己赚的钱可以去投资其他的项目，同时赚的钱还可以给股东分红或者偿还贷款。这类企业是最具备投资价值的&lt;/p&gt;</content><author><name></name></author><category term="金融" /><summary type="html">记录金融入门学习 巴菲特：买股票的本质是投资公司 彼得林奇：当你读不懂某一公司的财务情况时，不要投资。股市的最大的亏损源于投资了在资产负债方面很糟糕的公司。先看资产负债表，搞清该公司是否有偿债能力，然后再投钱冒险 金融书籍记录 彼得林奇 查理芒格 瑞达利欧 财务报表学习 财务报表分三类 利润表 资产负债表 现金流量表 在看公司公司财报前，先看会计师审计报告，在年报的第十一节，《审计意见》，审计意见反映了审计师的心声 利润表 形象解释 净利润中包含了企业的应收账款，所以并不能单单以净利润在决定公司运营好坏，还需结合现金流量表和资产负债表 扣非净利润 归属于母公司所有者的净利润 资产负债表 资产       负债       流动资产 说明 非流动资产 说明 负债 说明 所有者权益 说明 货币资金 企业的现金存款 固定资产 非货币资产，(房屋，设备，机器等) 银行负债 银行贷款 股东出钱   应收账款 发了货，还没结账，(坏账准备) 生物性资产 农林牧渔行业         存货 看行业，更新快的行业存货少好 无形资产 专利权，著作权，土地使用权         表格在手机上会有变形，截图如下 现金流量表 序号 类别 说明 1 经营活动产生的现金流量 利润表收入支出现金的变化 2 投资活动产生的现金流量 资产负债表的固定资产变动情况 3 筹资活动产生的现金流量 资产负债表的负债和所有者权益变动情况 1. 经营活动现金流 有公开数据的企业，直接看企业经营活动产生的现金流，这是现金流量表的核心。因为刚刚我们刚讲了，企业的经营能力才是我们投资者最应该看重的。而经营活动现金流，就代表着经营能力的强弱。 如果经营活动现金流量净额，长期为负的话（银行证券保险除外），代表企业日子不太好过，入不敷出，这类企业不用考虑投资。只有经营活动现金流量净额是正数，说明它才是一家正常的企业。 2. 投资活动现金流 3. 筹资活动中了解企业的融资情况 类型一、“+++”的企业 三项都为正的企业。表明上看起来，这样的公司特别不错。经营活动现金为正数，现金源源不断。但是有一个问题，就是企业经营赚了钱以后，为什么不向外投资呢？反而还需要筹资呢？难道都把钱放在银行账户上数钱玩吗？这类型的企业，要么就是即将大规模的开展对外大规模的投资活动，所以在筹集本钱。要么就很可能是起了歹心，借着上市公司的躯壳在赚钱。所以，如果是这三项都是正的企业，建议我们要谨慎观察一下。如果查阅很多材料，都看不出来企业有大投资的动作。建议这类型的企业，我们也淘汰掉。 类型二、“++-”的企业 这类型的企业，经营活动现金流为正，说明企业经营情况还不错。投资活动现金流为正，说明以前投资的资产，带来了利息等方面的收入。或者是变卖了资产，产生了收入。一般来说，资产带来的收益比较多，因为企业变卖资产的情况很小。筹资活动现金流为负数，要么就是还了贷款，要么就是给股东分红。这类的企业，如果投资现金流，不是变卖资产所得。而经营现金流和投资现金流，足以覆盖筹资现金流的流出。我们就可以初步判断，这家公司是健康发展的。 类型三、“+-+”的企业 这类企业，经营活动现金流同样为正，说明企业赚钱。同时筹资活动现金流为正，但是投资活动现金流是负。说明企业现在正在大力的扩大规模。需要把钱投入到新的项目中。这类企业有一个问题，就是所投资的项目如果创造辉煌，企业会高速的增长。反之，企业如果投资失败，会影响企业后期的发展。 这类型的企业，很考验我们对行业发展的一个判断。 类型四、“+–”的企业 经营活动现金流为正，同样说明企业赚钱。投资活动现金流为负，说明企业也在稳步的扩张。筹资活动现金流为负，说明企业还了贷款，或者给股东分红了。也就是说，企业靠着经营现金流的流入，实施了投资，并且同时还了贷款或给股东分红。这类型的企业是四种画像里面最好的企业，这种企业自我造血能力最强。靠着自己赚的钱可以去投资其他的项目，同时赚的钱还可以给股东分红或者偿还贷款。这类企业是最具备投资价值的</summary></entry><entry><title type="html">彼得林奇笔记</title><link href="http://localhost:4000/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="彼得林奇笔记" /><published>2019-07-07T00:00:00+08:00</published><updated>2019-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%AC%94%E8%AE%B0/">&lt;h2 id=&quot;彼得林奇投资风格&quot;&gt;彼得林奇投资风格&lt;/h2&gt;

&lt;h3 id=&quot;彼得林奇对公司的分类&quot;&gt;彼得林奇对公司的分类&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;缓慢增长型&lt;/li&gt;
  &lt;li&gt;稳定增长型&lt;/li&gt;
  &lt;li&gt;快速增长型&lt;/li&gt;
  &lt;li&gt;周期型&lt;/li&gt;
  &lt;li&gt;隐蔽资产型&lt;/li&gt;
  &lt;li&gt;困境反转型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;缓慢增长型&quot;&gt;缓慢增长型&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;是指增长速度相当于GDP增长速度的公司。在美国是3%左右，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此类公司的股票一般很难有较大的上涨空间，除非出现重大的重组之类的特殊事件，不然的话很难有催化剂让这类公司快速的上涨，股票走势相对会很平坦.&lt;/p&gt;

&lt;h3 id=&quot;稳定增长型公司&quot;&gt;稳定增长型公司&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;是指增长速度比缓慢增长型稍快且能保持相对稳定的公司。彼得林奇认为的增长速度是10-12%，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此类型股票的投资策略是具有要选择好的时机好的价格进入，而且具有相对的防御型，在股市大跌时此类股票可能会跌的幅度相对小很多，而且下跌后很快就会价值回归&lt;/p&gt;

&lt;h3 id=&quot;快速增长型公司&quot;&gt;快速增长型公司&lt;/h3&gt;

&lt;p&gt;这类股票是彼得林奇最喜欢的类型，其增长速度一般平均要在20%以上，且通常都是规模小，新成立不久、极具成长性的公司。这也是最容易出现10倍甚至百倍股票的地方。快速增长型公司并不一定属于快速增长型行业的公司，也有可能在夕阳行业中脱颖而出的小公司，这更得到彼得林奇的钟爱。这类公司可以通过不断争夺别家公司的市场份额来成长。但是快速增长型公司也存在着一定的风险，尤其是那些扩张过快但是资产负债不够健康的企业，经常由于管理层头脑发热导致资金链断裂而出现危机。&lt;/p&gt;

&lt;p&gt;在投资快速增长性公司是，一要看公司未来增长空间和时间有多大，二要看公司资产负债表是否足够健康稳健。&lt;/p&gt;

&lt;h3 id=&quot;周期型公司&quot;&gt;周期型公司&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这类公司的特点是其收益情况随着经济周期不断的扩张、收缩、再扩张、再收缩，周而复始。其收益在扩张期可能高达数十亿，在收缩期却可能亏损数十亿&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;汽车和航空公司、轮胎公司、钢铁公司以及化学公司都是周期型公司，甚至国防工业公司的行为也像周期型公司，因为它们的盈利随着各届政府政策的变化而相应上升与下降。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;时机选择是投资周期型公司股票的关键，你必须能够发现公司业务衰退或者繁荣的早期迹象。如果你在与钢铁、铝业、航空、汽车等有关的行业中工作，那么你已经具备了投资周期型公司股票的特殊优势，与其他任何类型的股票投资相比，这种特殊优势在周期型股票投资中尤其重要。&lt;/p&gt;

&lt;h3 id=&quot;资产隐蔽型公司&quot;&gt;资产隐蔽型公司&lt;/h3&gt;

&lt;p&gt;此类公司有很多的资产未反映在资产负债表数据当中，或者反映的是其原始价值。比如某个公司的土地记得是购买时的价格，现在已经翻了数倍。还有可能公司有一些古董。投资者一旦发现公司股价未反映公司的隐蔽资产，则应当买入等待价值发现。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最大的有线电视公司的股票数量非常之少，主要是因为当时我没能认识到这家公司资产的真正价值。当时这家公司不仅收益少得可怜而且负债高得吓人，从传统的观点来看，有线电视并不是一项很有吸引力的业务，但是该公司的资产（表现为有线电视用户）的巨大价值却远远超过了这些负面因素的影响，所有了解有线电视&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;逆境反转型公司&quot;&gt;逆境反转型公司&lt;/h3&gt;

&lt;p&gt;此类公司一般是已经处于破产的边缘或者经营已经非常困难，由于某一特殊事件比如政府救济、资产重组等导致经营出现好转，从破产中起死回生。资产重组概念就是属于此类。&lt;/p&gt;

&lt;h3 id=&quot;彼得林奇对业余投资者的建议&quot;&gt;彼得林奇对业余投资者的建议&lt;/h3&gt;

&lt;p&gt;每个人都有属于自己的能力圈，专注于自己熟悉的领域，利用自身所掌握的专业知识和经验，充分挖掘自身潜力，可以提高投资成功的概率&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作为一个业余投资者，你的优势并不在于从华尔街投资专家那里获得的所谓专业投资建议。你的优势其实在于你自身所具有的独特知识和经验。如果你充分发挥你的独特优势来投资于你充分了解的公司和行业，那么你肯定会打败那些投资专家们&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;搞清楚股票背后的公司&quot;&gt;搞清楚股票背后的公司&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;每只股票后面其实都是一家公司，你得弄清楚这家公司到底是如何经营的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一定要研究基本面&quot;&gt;一定要研究基本面&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;不研究过公司基本面就买股票，就像不看牌就打牌一样，投资赚钱的机会很小&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;长期持有&quot;&gt;长期持有&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;当你持有好公司的股票时，时间就会站在你这一边，持有时间越长，赚钱的机会越大。耐心持有好公司股票终将有好回报，即使错过了像沃尔玛这样的优秀公司股票前5年的大涨，未来5年内长期持有仍然会有很好的回报&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;投资是反人性的要抵抗人性的弱点&quot;&gt;投资是反人性的，要抵抗人性的弱点&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;最后，至关重要的是你要能够抵抗得了你自己人性的弱点以及内心的直觉。绝大多数的投资者内心的一个秘密角落里都会隐藏着一种自信，觉得自己拥有一种预测股票价格、黄金价格或者利率的神奇能力，尽管事实上这种虚妄的自信早已经一次又一次地被客观现实击得粉碎。让人感到不可思议的是，每当大多数的投资者强烈地预感到股价将会上涨或者经济将要好转时，却往往是正好相反的情况出现了。这一情况已经被那些十分流行的投资咨询时事通讯服务机构的调查所证明，尽管他们自己也经常在不适当的时候发表股市是牛是熊的错误预测。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="金融" /><category term="读书笔记" /><summary type="html">彼得林奇投资风格 彼得林奇对公司的分类 缓慢增长型 稳定增长型 快速增长型 周期型 隐蔽资产型 困境反转型 缓慢增长型 是指增长速度相当于GDP增长速度的公司。在美国是3%左右， 此类公司的股票一般很难有较大的上涨空间，除非出现重大的重组之类的特殊事件，不然的话很难有催化剂让这类公司快速的上涨，股票走势相对会很平坦. 稳定增长型公司 是指增长速度比缓慢增长型稍快且能保持相对稳定的公司。彼得林奇认为的增长速度是10-12%， 此类型股票的投资策略是具有要选择好的时机好的价格进入，而且具有相对的防御型，在股市大跌时此类股票可能会跌的幅度相对小很多，而且下跌后很快就会价值回归 快速增长型公司 这类股票是彼得林奇最喜欢的类型，其增长速度一般平均要在20%以上，且通常都是规模小，新成立不久、极具成长性的公司。这也是最容易出现10倍甚至百倍股票的地方。快速增长型公司并不一定属于快速增长型行业的公司，也有可能在夕阳行业中脱颖而出的小公司，这更得到彼得林奇的钟爱。这类公司可以通过不断争夺别家公司的市场份额来成长。但是快速增长型公司也存在着一定的风险，尤其是那些扩张过快但是资产负债不够健康的企业，经常由于管理层头脑发热导致资金链断裂而出现危机。 在投资快速增长性公司是，一要看公司未来增长空间和时间有多大，二要看公司资产负债表是否足够健康稳健。 周期型公司 这类公司的特点是其收益情况随着经济周期不断的扩张、收缩、再扩张、再收缩，周而复始。其收益在扩张期可能高达数十亿，在收缩期却可能亏损数十亿 汽车和航空公司、轮胎公司、钢铁公司以及化学公司都是周期型公司，甚至国防工业公司的行为也像周期型公司，因为它们的盈利随着各届政府政策的变化而相应上升与下降。 时机选择是投资周期型公司股票的关键，你必须能够发现公司业务衰退或者繁荣的早期迹象。如果你在与钢铁、铝业、航空、汽车等有关的行业中工作，那么你已经具备了投资周期型公司股票的特殊优势，与其他任何类型的股票投资相比，这种特殊优势在周期型股票投资中尤其重要。 资产隐蔽型公司 此类公司有很多的资产未反映在资产负债表数据当中，或者反映的是其原始价值。比如某个公司的土地记得是购买时的价格，现在已经翻了数倍。还有可能公司有一些古董。投资者一旦发现公司股价未反映公司的隐蔽资产，则应当买入等待价值发现。 最大的有线电视公司的股票数量非常之少，主要是因为当时我没能认识到这家公司资产的真正价值。当时这家公司不仅收益少得可怜而且负债高得吓人，从传统的观点来看，有线电视并不是一项很有吸引力的业务，但是该公司的资产（表现为有线电视用户）的巨大价值却远远超过了这些负面因素的影响，所有了解有线电视 逆境反转型公司 此类公司一般是已经处于破产的边缘或者经营已经非常困难，由于某一特殊事件比如政府救济、资产重组等导致经营出现好转，从破产中起死回生。资产重组概念就是属于此类。 彼得林奇对业余投资者的建议 每个人都有属于自己的能力圈，专注于自己熟悉的领域，利用自身所掌握的专业知识和经验，充分挖掘自身潜力，可以提高投资成功的概率 作为一个业余投资者，你的优势并不在于从华尔街投资专家那里获得的所谓专业投资建议。你的优势其实在于你自身所具有的独特知识和经验。如果你充分发挥你的独特优势来投资于你充分了解的公司和行业，那么你肯定会打败那些投资专家们 搞清楚股票背后的公司 每只股票后面其实都是一家公司，你得弄清楚这家公司到底是如何经营的 一定要研究基本面 不研究过公司基本面就买股票，就像不看牌就打牌一样，投资赚钱的机会很小 长期持有 当你持有好公司的股票时，时间就会站在你这一边，持有时间越长，赚钱的机会越大。耐心持有好公司股票终将有好回报，即使错过了像沃尔玛这样的优秀公司股票前5年的大涨，未来5年内长期持有仍然会有很好的回报 投资是反人性的，要抵抗人性的弱点 最后，至关重要的是你要能够抵抗得了你自己人性的弱点以及内心的直觉。绝大多数的投资者内心的一个秘密角落里都会隐藏着一种自信，觉得自己拥有一种预测股票价格、黄金价格或者利率的神奇能力，尽管事实上这种虚妄的自信早已经一次又一次地被客观现实击得粉碎。让人感到不可思议的是，每当大多数的投资者强烈地预感到股价将会上涨或者经济将要好转时，却往往是正好相反的情况出现了。这一情况已经被那些十分流行的投资咨询时事通讯服务机构的调查所证明，尽管他们自己也经常在不适当的时候发表股市是牛是熊的错误预测。</summary></entry><entry><title type="html">PMP考试总结</title><link href="http://localhost:4000/PMP%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="PMP考试总结" /><published>2019-06-22T00:00:00+08:00</published><updated>2019-06-22T00:00:00+08:00</updated><id>http://localhost:4000/PMP%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93</id><content type="html" xml:base="http://localhost:4000/PMP%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/">&lt;h3 id=&quot;记录下在备考pmp的一些知识&quot;&gt;记录下在备考PMP的一些知识&lt;/h3&gt;

&lt;h4 id=&quot;pmp十大知识领域&quot;&gt;PMP十大知识领域&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;整合管理&lt;/li&gt;
  &lt;li&gt;范围管理&lt;/li&gt;
  &lt;li&gt;进度管理&lt;/li&gt;
  &lt;li&gt;成本管理&lt;/li&gt;
  &lt;li&gt;质量管理&lt;/li&gt;
  &lt;li&gt;资源管理&lt;/li&gt;
  &lt;li&gt;沟通管理&lt;/li&gt;
  &lt;li&gt;风险管理&lt;/li&gt;
  &lt;li&gt;采购管理&lt;/li&gt;
  &lt;li&gt;相关方管理&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;五大过程组&quot;&gt;五大过程组&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;启动&lt;/li&gt;
  &lt;li&gt;规划&lt;/li&gt;
  &lt;li&gt;执行&lt;/li&gt;
  &lt;li&gt;监控&lt;/li&gt;
  &lt;li&gt;收尾&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;共131个工具和技术&quot;&gt;共131个工具和技术&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据收集技术。用于从各种渠道收集数据与信息。共有九种数据收集工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据分析技术。用于组织、评估和评价数据与信息。共有 27 种数据分析工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据表现技术。用于显示用来传递数据和信息的图形方式或其他方法。共有 15 种数据表现工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;决策技术。用于从不同备选方案选择行动方案。共有两种决策工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;沟通技巧。用于在相关方之间传递信息。共有两种沟通技巧工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;人际关系与团队技能。用于有效地领导团队成员和其他相关方并与之进行互动。共有 17 种人际关系与团队技能工具与技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2019/07/93c0798878114870.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="PMP" /><summary type="html">记录下在备考PMP的一些知识 PMP十大知识领域 整合管理 范围管理 进度管理 成本管理 质量管理 资源管理 沟通管理 风险管理 采购管理 相关方管理 五大过程组 启动 规划 执行 监控 收尾 共131个工具和技术 数据收集技术。用于从各种渠道收集数据与信息。共有九种数据收集工具与技术。 数据分析技术。用于组织、评估和评价数据与信息。共有 27 种数据分析工具与技术。 数据表现技术。用于显示用来传递数据和信息的图形方式或其他方法。共有 15 种数据表现工具与技术。 决策技术。用于从不同备选方案选择行动方案。共有两种决策工具与技术。 沟通技巧。用于在相关方之间传递信息。共有两种沟通技巧工具与技术。 人际关系与团队技能。用于有效地领导团队成员和其他相关方并与之进行互动。共有 17 种人际关系与团队技能工具与技术。</summary></entry><entry><title type="html">Swift组件化</title><link href="http://localhost:4000/Swift%E7%BB%84%E4%BB%B6%E5%8C%96/" rel="alternate" type="text/html" title="Swift组件化" /><published>2019-06-16T00:00:00+08:00</published><updated>2019-06-16T00:00:00+08:00</updated><id>http://localhost:4000/Swift%E7%BB%84%E4%BB%B6%E5%8C%96</id><content type="html" xml:base="http://localhost:4000/Swift%E7%BB%84%E4%BB%B6%E5%8C%96/">&lt;h3 id=&quot;ios组件化方案&quot;&gt;iOS组件化方案&lt;/h3&gt;

&lt;p&gt;将程序中功能相对独立的部分打包在一起形成模块，并且减少模块之间的直接依赖。&lt;/p&gt;

&lt;h4 id=&quot;为什么要组件化&quot;&gt;为什么要组件化&lt;/h4&gt;
&lt;p&gt;随着业务复杂度不断增加，工程越来越庞大，开发人员逐渐增多，单一工程的开发模式会出现一系列问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;耦合严重：组件之间依赖过于复杂，维护成本高。&lt;/li&gt;
  &lt;li&gt;容易出现冲突：xib 或者代码冲突机会大大增加。&lt;/li&gt;
  &lt;li&gt;开发效率低：每次都需要编译整个项目。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;组件间通信方案&quot;&gt;组件间通信方案&lt;/h4&gt;
&lt;h5 id=&quot;目前业界主要的方案有以下几种&quot;&gt;目前业界主要的方案有以下几种&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Protocol注册方案&lt;/li&gt;
  &lt;li&gt;URL注册方案&lt;/li&gt;
  &lt;li&gt;Target-Action runtime调用方案&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;本博客采用target-action的方式&quot;&gt;本博客采用Target-Action的方式&lt;/h5&gt;
&lt;p&gt;原理：&lt;/p&gt;

&lt;p&gt;每个组件, 提供一个统一暴露的接口文件
额外的维护一个中间件的分类扩展（用Runtime进行解耦）
其他地方通过target-action的方案进行交互&lt;/p&gt;

&lt;p&gt;特点：&lt;/p&gt;

&lt;p&gt;统一了组件api服务
组件与框架之间无依赖关系
需要额外维护中间件类扩展&lt;/p&gt;

&lt;h3 id=&quot;创建组件&quot;&gt;创建组件&lt;/h3&gt;
&lt;p&gt;查看本地Repo&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加本地远程索引库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo add specs http:xxx&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;步骤一-创建podspec&quot;&gt;步骤一： 创建podspec&lt;/h5&gt;
&lt;p&gt;创建Pod, 会生成podspec文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod lib create project&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;步骤二-本地验证&quot;&gt;步骤二： 本地验证&lt;/h5&gt;
&lt;p&gt;验证本地spec是否存在错误&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod lib lint&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果本地spec中对依赖了私有库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod lib lint --sources='private spec url, https://github.com/CocoaPods/Specs.git' --allow-warnings&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;步骤三-提交到远程&quot;&gt;步骤三： 提交到远程&lt;/h5&gt;
&lt;p&gt;本地验证成功后，需提交到远程服务器，并打Tag，确保和spec中保持一致&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin master
git tag 1.0
git push --tags #上传本地所有tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤四-远程验证&quot;&gt;步骤四: 远程验证&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod spec lint --allow-warnings --verbose&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;步骤五-组件库发布&quot;&gt;步骤五: 组件库发布&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo push RepoName xx.podspec&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;步骤六-检查组件库&quot;&gt;步骤六: 检查组件库&lt;/h5&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.cocoapods&lt;/code&gt;目录下查看与Spec同名的文件夹，即为本地索引库&lt;/p&gt;

&lt;h4 id=&quot;使用组件&quot;&gt;使用组件&lt;/h4&gt;
&lt;p&gt;在podfile中添加pod的源路径&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source 'https://github.com/CocoaPods/Specs.git' 
source 'xxx/xxx/xxxxx.git' # 私有库 repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;podspec文件&quot;&gt;podspec文件&lt;/h4&gt;
&lt;p&gt;s.source_files的写法&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“*” 表示匹配所有文件&lt;/li&gt;
  &lt;li&gt;“*.{h,m,swift}” 表示匹配所有以.h和.m结尾的文件&lt;/li&gt;
  &lt;li&gt;“**” 表示匹配所有子目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  s.dependency 'IQKeyboardManagerSwift', '6.3.0'
  s.dependency 'Kingfisher',  '4.10.1'  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在spec中添加资源文件(图片，国际化字符串)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;resource_bundles&lt;/li&gt;
  &lt;li&gt;resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;官方建议使用&lt;code class=&quot;highlighter-rouge&quot;&gt;resource_bundles&lt;/code&gt;，这样可以避免主工程和组件中的资源出现冲突&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="Swift" /><summary type="html">iOS组件化方案 将程序中功能相对独立的部分打包在一起形成模块，并且减少模块之间的直接依赖。 为什么要组件化 随着业务复杂度不断增加，工程越来越庞大，开发人员逐渐增多，单一工程的开发模式会出现一系列问题： 耦合严重：组件之间依赖过于复杂，维护成本高。 容易出现冲突：xib 或者代码冲突机会大大增加。 开发效率低：每次都需要编译整个项目。 组件间通信方案 目前业界主要的方案有以下几种 Protocol注册方案 URL注册方案 Target-Action runtime调用方案 本博客采用Target-Action的方式 原理： 每个组件, 提供一个统一暴露的接口文件 额外的维护一个中间件的分类扩展（用Runtime进行解耦） 其他地方通过target-action的方案进行交互 特点： 统一了组件api服务 组件与框架之间无依赖关系 需要额外维护中间件类扩展 创建组件 查看本地Repo pod repo list 添加本地远程索引库 pod repo add specs http:xxx 步骤一： 创建podspec 创建Pod, 会生成podspec文件 pod lib create project 步骤二： 本地验证 验证本地spec是否存在错误 pod lib lint 如果本地spec中对依赖了私有库 pod lib lint --sources='private spec url, https://github.com/CocoaPods/Specs.git' --allow-warnings 步骤三： 提交到远程 本地验证成功后，需提交到远程服务器，并打Tag，确保和spec中保持一致 git push origin master git tag 1.0 git push --tags #上传本地所有tag 步骤四: 远程验证 pod spec lint --allow-warnings --verbose 步骤五: 组件库发布 pod repo push RepoName xx.podspec 步骤六: 检查组件库 在~/.cocoapods目录下查看与Spec同名的文件夹，即为本地索引库 使用组件 在podfile中添加pod的源路径 source 'https://github.com/CocoaPods/Specs.git' source 'xxx/xxx/xxxxx.git' # 私有库 repo podspec文件 s.source_files的写法 “*” 表示匹配所有文件 “*.{h,m,swift}” 表示匹配所有以.h和.m结尾的文件 “**” 表示匹配所有子目录 s.dependency 'IQKeyboardManagerSwift', '6.3.0' s.dependency 'Kingfisher', '4.10.1' 在spec中添加资源文件(图片，国际化字符串) resource_bundles resources 官方建议使用resource_bundles，这样可以避免主工程和组件中的资源出现冲突</summary></entry></feed>